import base64

def run_encoded_script():
    encoded_str = """# MADE BY DNW ALL RIGHTS RESERVED
# DISCORD .donotworry.


import time
import phonenumbers
from phonenumbers import geocoder, carrier, timezone
from phonenumbers.phonenumberutil import NumberParseException
from datetime import datetime
import pytz
import re
import folium
from opencage.geocoder import OpenCageGeocode
import os
import webbrowser
import geocoder as geo_lib
import requests
from bs4 import BeautifulSoup
import urllib.parse

# ANSI color codes
GREEN = '\033[92m'
BRIGHT_GREEN = '\033[1;92m'
RED = '\033[91m'
YELLOW = '\033[93m'
BLUE = '\033[94m'
CYAN = '\033[96m'
WHITE = '\033[97m'
RESET = '\033[0m'
BOLD = '\033[1m'

# MADE BY DNW ALL RIGHTS RESERVED
# DISCORD .donotworry.
# Worldwide Area Codes Database for Enhanced Geolocation
WORLDWIDE_AREA_CODES = {
    # North America (Country Code: 1)
    1: {
        # United States Area Codes
        201: "Newark, NJ", 202: "Washington, DC", 203: "New Haven, CT", 204: "Winnipeg, MB",
        205: "Birmingham, AL", 206: "Seattle, WA", 207: "Maine", 208: "Idaho",
        209: "Stockton, CA", 210: "San Antonio, TX", 212: "Manhattan, NY", 213: "Los Angeles, CA",
        214: "Dallas, TX", 215: "Philadelphia, PA", 216: "Cleveland, OH", 217: "Springfield, IL",
        218: "Duluth, MN", 219: "Gary, IN", 224: "Evanston, IL", 225: "Baton Rouge, LA",
        226: "London, ON", 228: "Gulfport, MS", 229: "Albany, GA", 231: "Muskegon, MI",
        234: "Akron, OH", 236: "Vancouver, BC", 239: "Fort Myers, FL", 240: "Frederick, MD",
        242: "Bahamas", 246: "Barbados", 248: "Pontiac, MI", 249: "Sudbury, ON",
        250: "Victoria, BC", 251: "Mobile, AL", 252: "Rocky Mount, NC", 253: "Tacoma, WA",
        254: "Killeen, TX", 256: "Huntsville, AL", 260: "Fort Wayne, IN", 262: "Kenosha, WI",
        264: "Anguilla", 267: "Philadelphia, PA", 268: "Antigua", 269: "Kalamazoo, MI",
        270: "Bowling Green, KY", 276: "Bristol, VA", 281: "Houston, TX", 284: "British Virgin Islands",
        289: "Hamilton, ON", 301: "Rockville, MD", 302: "Delaware", 303: "Denver, CO",
        304: "West Virginia", 305: "Miami, FL", 306: "Saskatchewan", 307: "Wyoming",
        308: "North Platte, NE", 309: "Peoria, IL", 310: "Beverly Hills, CA", 312: "Chicago, IL",
        313: "Detroit, MI", 314: "St. Louis, MO", 315: "Syracuse, NY", 316: "Wichita, KS",
        317: "Indianapolis, IN", 318: "Shreveport, LA", 319: "Cedar Rapids, IA", 320: "St. Cloud, MN",
        321: "Orlando, FL", 323: "Los Angeles, CA", 325: "Abilene, TX", 330: "Akron, OH",
        331: "Aurora, IL", 334: "Montgomery, AL", 336: "Greensboro, NC", 337: "Lafayette, LA",
        339: "Boston, MA", 340: "US Virgin Islands", 341: "Oakland, CA", 343: "Ottawa, ON",
        345: "Cayman Islands", 347: "Brooklyn, NY", 351: "Boston, MA", 352: "Gainesville, FL",
        360: "Bellingham, WA", 361: "Corpus Christi, TX", 365: "Hamilton, ON", 385: "Salt Lake City, UT",
        386: "Daytona Beach, FL", 401: "Rhode Island", 402: "Omaha, NE", 403: "Calgary, AB",
        404: "Atlanta, GA", 405: "Oklahoma City, OK", 406: "Montana", 407: "Orlando, FL",
        408: "San Jose, CA", 409: "Beaumont, TX", 410: "Baltimore, MD", 412: "Pittsburgh, PA",
        413: "Springfield, MA", 414: "Milwaukee, WI", 415: "San Francisco, CA", 416: "Toronto, ON",
        417: "Springfield, MO", 418: "Quebec City, QC", 419: "Toledo, OH", 423: "Chattanooga, TN",
        424: "Los Angeles, CA", 425: "Bellevue, WA", 430: "Tyler, TX", 432: "Midland, TX",
        434: "Lynchburg, VA", 435: "St. George, UT", 437: "Toronto, ON", 438: "Montreal, QC",
        440: "Cleveland, OH", 441: "Bermuda", 442: "Oceanside, CA", 443: "Baltimore, MD",
        445: "Philadelphia, PA", 450: "Laval, QC", 456: "Inbound International", 464: "Illinois",
        469: "Dallas, TX", 470: "Atlanta, GA", 473: "Grenada", 475: "Bridgeport, CT",
        478: "Macon, GA", 479: "Fort Smith, AR", 480: "Scottsdale, AZ", 484: "Allentown, PA",
        501: "Little Rock, AR", 502: "Louisville, KY", 503: "Portland, OR", 504: "New Orleans, LA",
        505: "Albuquerque, NM", 506: "New Brunswick", 507: "Rochester, MN", 508: "Worcester, MA",
        509: "Spokane, WA", 510: "Oakland, CA", 512: "Austin, TX", 513: "Cincinnati, OH",
        514: "Montreal, QC", 515: "Des Moines, IA", 516: "Hempstead, NY", 517: "Lansing, MI",
        518: "Albany, NY", 519: "London, ON", 520: "Tucson, AZ", 530: "Redding, CA",
        531: "Omaha, NE", 540: "Fredericksburg, VA", 541: "Eugene, OR", 551: "Jersey City, NJ",
        559: "Fresno, CA", 561: "West Palm Beach, FL", 562: "Long Beach, CA", 563: "Davenport, IA",
        564: "Washington", 567: "Toledo, OH", 570: "Scranton, PA", 571: "Arlington, VA",
        573: "Columbia, MO", 574: "South Bend, IN", 575: "Las Cruces, NM", 580: "Lawton, OK",
        581: "Quebec City, QC", 585: "Rochester, NY", 586: "Warren, MI", 587: "Calgary, AB",
        601: "Jackson, MS", 602: "Phoenix, AZ", 603: "New Hampshire", 604: "Vancouver, BC",
        605: "South Dakota", 606: "Ashland, KY", 607: "Binghamton, NY", 608: "Madison, WI",
        609: "Trenton, NJ", 610: "Allentown, PA", 612: "Minneapolis, MN", 613: "Ottawa, ON",
        614: "Columbus, OH", 615: "Nashville, TN", 616: "Grand Rapids, MI", 617: "Boston, MA",
        618: "Centralia, IL", 619: "San Diego, CA", 620: "Hutchinson, KS", 623: "Glendale, AZ",
        626: "Pasadena, CA", 628: "San Francisco, CA", 629: "Nashville, TN", 630: "Aurora, IL",
        631: "Huntington, NY", 636: "O'Fallon, MO", 639: "Saskatchewan", 641: "Mason City, IA",
        646: "Manhattan, NY", 647: "Toronto, ON", 649: "Turks and Caicos", 650: "Palo Alto, CA",
        651: "St. Paul, MN", 657: "Anaheim, CA", 660: "Sedalia, MO", 661: "Bakersfield, CA",
        662: "Tupelo, MS", 664: "Montserrat", 667: "Baltimore, MD", 669: "San Jose, CA",
        670: "Northern Mariana Islands", 671: "Guam", 672: "British Columbia", 678: "Atlanta, GA",
        679: "Detroit, MI", 680: "Syracuse, NY", 681: "Charleston, WV", 682: "Fort Worth, TX",
        683: "Plano, TX", 684: "American Samoa", 689: "Orlando, FL", 701: "North Dakota",
        702: "Las Vegas, NV", 703: "Arlington, VA", 704: "Charlotte, NC", 705: "North Bay, ON",
        706: "Columbus, GA", 707: "Santa Rosa, CA", 708: "Cicero, IL", 709: "St. John's, NL",
        712: "Sioux City, IA", 713: "Houston, TX", 714: "Anaheim, CA", 715: "Wausau, WI",
        716: "Buffalo, NY", 717: "Lancaster, PA", 718: "Brooklyn, NY", 719: "Colorado Springs, CO",
        720: "Denver, CO", 724: "New Castle, PA", 725: "Las Vegas, NV", 726: "San Antonio, TX",
        727: "St. Petersburg, FL", 728: "Memphis, TN", 731: "Jackson, TN", 732: "New Brunswick, NJ",
        734: "Ann Arbor, MI", 737: "Austin, TX", 740: "Lancaster, OH", 743: "Greensboro, NC",
        747: "Burbank, CA", 754: "Fort Lauderdale, FL", 757: "Virginia Beach, VA", 758: "St. Lucia",
        760: "Oceanside, CA", 762: "Columbus, GA", 763: "Brooklyn Park, MN", 765: "Muncie, IN",
        767: "Dominica", 769: "Jackson, MS", 770: "Atlanta, GA", 772: "Port St. Lucie, FL",
        773: "Chicago, IL", 774: "Worcester, MA", 775: "Reno, NV", 778: "Vancouver, BC",
        779: "Rockford, IL", 780: "Edmonton, AB", 781: "Boston, MA", 782: "Nova Scotia",
        784: "St. Vincent", 785: "Topeka, KS", 786: "Miami, FL", 787: "San Juan, PR",
        801: "Salt Lake City, UT", 802: "Vermont", 803: "Columbia, SC", 804: "Richmond, VA",
        805: "Oxnard, CA", 806: "Lubbock, TX", 807: "Thunder Bay, ON", 808: "Honolulu, HI",
        809: "Dominican Republic", 810: "Flint, MI", 812: "Evansville, IN", 813: "Tampa, FL",
        814: "Erie, PA", 815: "Rockford, IL", 816: "Kansas City, MO", 817: "Fort Worth, TX",
        818: "San Fernando, CA", 819: "Sherbrooke, QC", 825: "Calgary, AB", 828: "Asheville, NC",
        829: "Dominican Republic", 830: "Fredericksburg, TX", 831: "Salinas, CA", 832: "Houston, TX",
        843: "Charleston, SC", 845: "Poughkeepsie, NY", 847: "Evanston, IL", 848: "New Brunswick, NJ",
        849: "Dominican Republic", 850: "Tallahassee, FL", 854: "Charleston, SC", 856: "Camden, NJ",
        857: "Boston, MA", 858: "San Diego, CA", 859: "Lexington, KY", 860: "Hartford, CT",
        862: "Newark, NJ", 863: "Lakeland, FL", 864: "Greenville, SC", 865: "Knoxville, TN",
        867: "Yukon/NWT/Nunavut", 868: "Trinidad and Tobago", 869: "St. Kitts and Nevis",
        870: "Jonesboro, AR", 872: "Chicago, IL", 873: "Sherbrooke, QC", 876: "Jamaica",
        878: "Pittsburgh, PA", 901: "Memphis, TN", 902: "Halifax, NS", 903: "Tyler, TX",
        904: "Jacksonville, FL", 905: "Hamilton, ON", 906: "Marquette, MI", 907: "Alaska",
        908: "Elizabeth, NJ", 909: "San Bernardino, CA", 910: "Fayetteville, NC", 912: "Savannah, GA",
        913: "Kansas City, KS", 914: "White Plains, NY", 915: "El Paso, TX", 916: "Sacramento, CA",
        917: "New York, NY", 918: "Tulsa, OK", 919: "Raleigh, NC", 920: "Green Bay, WI",
        925: "Concord, CA", 928: "Flagstaff, AZ", 929: "New York, NY", 930: "Georgetown, TX",
        931: "Clarksville, TN", 934: "Huntington, NY", 936: "Huntsville, TX", 937: "Dayton, OH",
        938: "Huntsville, AL", 939: "San Juan, PR", 940: "Wichita Falls, TX", 941: "Sarasota, FL",
        947: "Troy, MI", 949: "Irvine, CA", 951: "Riverside, CA", 952: "Bloomington, MN",
        954: "Fort Lauderdale, FL", 956: "Laredo, TX", 959: "Hartford, CT", 970: "Fort Collins, CO",
        971: "Portland, OR", 972: "Dallas, TX", 973: "Newark, NJ", 978: "Lowell, MA",
        979: "College Station, TX", 980: "Charlotte, NC", 984: "Raleigh, NC", 985: "Hammond, LA",
        989: "Saginaw, MI"
    },
    
    # United Kingdom (Country Code: 44)
    44: {
        113: "Leeds", 114: "Sheffield", 115: "Nottingham", 116: "Leicester", 117: "Bristol",
        118: "Reading", 121: "Birmingham", 131: "Edinburgh", 141: "Glasgow", 151: "Liverpool",
        161: "Manchester", 191: "Newcastle/Sunderland", 1204: "Bolton", 1208: "London",
        1223: "Cambridge", 1224: "Aberdeen", 1225: "Bath", 1226: "Barnsley", 1227: "Canterbury",
        1228: "Carlisle", 1229: "Barrow-in-Furness", 1233: "Ashford", 1234: "Bedford",
        1235: "Abingdon", 1236: "Coatbridge", 1237: "Bideford", 1239: "Cardigan",
        1241: "Arbroath", 1242: "Cheltenham", 1243: "Chichester", 1244: "Chester",
        1245: "Chelmsford", 1246: "Chesterfield", 1248: "Bangor", 1249: "Chippenham",
        1250: "Blairgowrie", 1252: "Alton", 1253: "Blackpool", 1254: "Blackburn",
        1255: "Clacton-on-Sea", 1256: "Basingstoke", 1257: "Caterham", 1258: "Kintore",
        1259: "Alloa", 1260: "Huntly", 1261: "Banff", 1262: "Bridlington", 1263: "Cromer",
        1264: "Andover", 1267: "Carmarthen", 1268: "Basildon", 1269: "Ammanford",
        1270: "Crewe", 1271: "Barnstaple", 1272: "Bristol", 1273: "Brighton", 1274: "Bradford",
        1275: "Clevedon", 1276: "Camberley", 1277: "Brentwood", 1278: "Burnham-on-Sea",
        1279: "Bishop's Stortford", 1280: "Buckingham", 1282: "Burnley", 1283: "Burton upon Trent",
        1284: "Bury St Edmunds", 1285: "Cirencester", 1286: "Caernarfon", 1287: "Guisborough",
        1288: "Bude", 1289: "Stanhope", 1290: "Cumnock", 1291: "Chepstow", 1292: "Ayr",
        1293: "Crawley", 1294: "Ardrossan", 1295: "Banbury", 1296: "Aylesbury",
        1297: "Axminster", 1298: "Campbeltown", 1299: "Evesham"
    },
    
    # Germany (Country Code: 49)
    49: {
        30: "Berlin", 40: "Hamburg", 69: "Frankfurt am Main", 89: "Munich", 221: "Cologne",
        211: "Dsseldorf", 201: "Essen", 231: "Dortmund", 234: "Unna", 208: "Oberhausen",
        209: "Gelsenkirchen", 203: "Duisburg", 202: "Wuppertal", 212: "Solingen",
        2131: "Neuss", 2133: "Dormagen", 214: "Leverkusen", 2161: "Mnchengladbach",
        2162: "Viersen", 2163: "Schwalmtal", 2166: "Jchen", 2181: "Grevenbroich",
        341: "Leipzig", 351: "Dresden", 361: "Erfurt", 371: "Chemnitz", 381: "Rostock",
        385: "Schwerin", 391: "Magdeburg", 421: "Halle", 431: "Weimar", 441: "Oldenburg",
        451: "Bremerhaven", 461: "Bremen", 471: "Emden", 481: "Gttingen", 511: "Hannover",
        521: "Hildesheim", 531: "Braunschweig", 541: "Osnabrck", 551: "Gttingen",
        561: "Bad Hersfeld", 571: "Minden", 581: "Hameln", 591: "Lingen", 611: "Darmstadt",
        621: "Mannheim", 631: "Kaiserslautern", 641: "Gieen", 651: "Bad Homburg",
        661: "Fulda", 671: "Bingen", 681: "Saarbrcken", 691: "Kaiserslautern",
        711: "Stuttgart", 721: "Karlsruhe", 731: "Ulm", 741: "Heilbronn", 751: "Pforzheim",
        761: "Freiburg", 771: "Balingen", 781: "Emmendingen", 791: "Schwbisch Hall",
        821: "Augsburg", 831: "Kempten", 841: "Rosenheim", 851: "Passau", 861: "Traunstein",
        871: "Landshut", 881: "Weilheim", 891: "Starnberg", 921: "Bayreuth", 931: "Wrzburg",
        941: "Regensburg", 951: "Bamberg", 961: "Weiden"
    },
    
    # France (Country Code: 33)
    33: {
        1: "Paris/le-de-France", 2: "Northwest France", 3: "Northeast France",
        4: "Southeast France", 5: "Southwest France", 9: "Overseas territories"
    },
    
    # Japan (Country Code: 81)
    81: {
        3: "Tokyo", 6: "Osaka", 45: "Yokohama", 52: "Nagoya", 75: "Kyoto", 78: "Kobe",
        92: "Fukuoka", 95: "Niigata", 22: "Sendai", 96: "Kumamoto", 82: "Hiroshima",
        258: "Nara", 266: "Chiba", 422: "Shizuoka", 426: "Hamamatsu", 43: "Kawasaki",
        44: "Sagamihara", 48: "Saitama", 72: "Sakai", 774: "Kyoto", 797: "Himeji",
        824: "Kurashiki", 829: "Fukuyama", 857: "Sasebo", 985: "Miyazaki"
    },
    
    # Australia (Country Code: 61)
    61: {
        2: "New South Wales", 3: "Victoria", 7: "Queensland", 8: "South Australia/NT/WA"
    },
    
    # China (Country Code: 86)
    86: {
        10: "Beijing", 20: "Guangzhou", 21: "Shanghai", 22: "Tianjin", 23: "Chongqing",
        24: "Shenyang", 25: "Nanjing", 27: "Wuhan", 28: "Chengdu", 29: "Xian",
        311: "Shijiazhuang", 312: "Tangshan", 313: "Qinhuangdao", 314: "Handan",
        315: "Xingtai", 316: "Baoding", 317: "Zhangjiakou", 318: "Chengde",
        319: "Cangzhou", 335: "Qinhuangdao", 349: "Datong", 351: "Taiyuan",
        352: "Datong", 353: "Yangquan", 354: "Changzhi", 355: "Jincheng",
        356: "Shuozhou", 357: "Jinzhong", 358: "Yuncheng", 359: "Xinzhou",
        371: "Zhengzhou", 372: "Kaifeng", 373: "Xinxiang", 374: "Anyang",
        375: "Hebi", 376: "Puyang", 377: "Xinyang", 378: "Luohe", 379: "Shangqiu",
        391: "Jiyuan", 392: "Sanmenxia", 393: "Puyang", 394: "Zhoukou",
        395: "Zhumadian", 396: "Jiaozuo", 397: "Hebi", 398: "Anyang",
        411: "Shenyang", 412: "Dalian", 413: "Anshan", 414: "Fushun", 415: "Benxi",
        416: "Dandong", 417: "Jinzhou", 418: "Yingkou", 419: "Fuxin", 421: "Liaoyang",
        427: "Panjin", 428: "Tieling", 429: "Chaoyang", 431: "Changchun",
        432: "Jilin", 433: "Siping", 434: "Liaoyuan", 435: "Tonghua", 436: "Baishan",
        437: "Songyuan", 438: "Baicheng", 439: "Yanbian", 451: "Harbin",
        452: "Qiqihar", 453: "Mudanjiang", 454: "Jiamusi", 455: "Daqing",
        456: "Yichun", 457: "Jixi", 458: "Hegang", 459: "Shuangyashan",
        464: "Qitaihe", 467: "Heihe", 468: "Suihua", 469: "Daxinganling"
    },
    
    # India (Country Code: 91)
    91: {
        11: "New Delhi", 22: "Mumbai", 33: "Kolkata", 44: "Chennai", 80: "Bangalore",
        40: "Hyderabad", 79: "Ahmedabad", 20: "Pune", 484: "Kochi", 471: "Thiruvananthapuram",
        422: "Nashik", 265: "Bhopal", 755: "Bhubaneswar", 674: "Srinagar",
        172: "Shimla", 135: "Chandigarh", 181: "Jammu", 194: "Srinagar",
        1364: "Gangtok", 361: "Guwahati", 381: "Imphal", 370: "Shillong",
        389: "Aizawl", 3795: "Kohima", 360: "Agartala", 3592: "Itanagar",
        512: "Hyderabad", 40: "Hyderabad", 866: "Vijayawada", 891: "Visakhapatnam",
        863: "Tirupati", 8554: "Nellore", 8332: "Kurnool", 8518: "Anantapur",
        8414: "Chittoor", 8642: "Eluru", 8812: "Rajahmundry", 8861: "Kakinada"
    }
}

# Comprehensive worldwide carrier database by country and number patterns
CARRIER_DATABASE = {
    # United States & Canada (Country Code: 1)
    1: {
        'patterns': {
            # Major US Carriers
            r'^1(2(0[1-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9]))': 'Verizon Wireless',
            r'^1(3(0[1-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9]))': 'AT&T Mobility',
            r'^1(4(0[4-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9]))': 'T-Mobile US',
            r'^1(6(0[7-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9]))': 'Sprint Corporation',
            r'^1(7(0[4-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9]))': 'Cricket Wireless',
            r'^1(9(0[1-9]|1[0-9]|2[0-9]|3[0-9]|4[0-9]|5[0-9]|6[0-9]|7[0-9]|8[0-9]|9[0-9]))': 'Google Voice',

            # Straight Talk Wireless (MVNO) - Common patterns
            r'^1(855|844|833|888|877|314|866)[0-9]{7}': 'Straight Talk Wireless',
            r'^1(551|973)[0-9]{7}': 'Straight Talk Wireless (NJ)',
            r'^1(254|940|903)[0-9]{7}': 'Straight Talk Wireless (TX)',
            r'^1(321|407|561)[0-9]{7}': 'Straight Talk Wireless (FL)',
            r'^1(740|330|937)[0-9]{7}': 'Straight Talk Wireless (OH)',
            r'^1(870|479)[0-9]{7}': 'Straight Talk Wireless (AR)',

            # More specific Straight Talk patterns on Verizon network
            r'^1(607)[2-3][0-9]{5}': 'Straight Talk Wireless (Verizon Network)',
            r'^1(315)[4-6][0-9]{5}': 'Straight Talk Wireless (Verizon Network)',
            r'^1(518)[3-5][0-9]{5}': 'Straight Talk Wireless (Verizon Network)',
        },
        'location_carriers': {
            'New York': ['Verizon Wireless', 'AT&T Mobility', 'T-Mobile US', 'Sprint'],
            'California': ['Verizon Wireless', 'AT&T Mobility', 'T-Mobile US', 'Sprint'],
            'Texas': ['Verizon Wireless', 'AT&T Mobility', 'T-Mobile US', 'Sprint'],
            'Florida': ['Verizon Wireless', 'AT&T Mobility', 'T-Mobile US', 'Sprint'],
            'default': ['Verizon Wireless', 'AT&T Mobility', 'T-Mobile US', 'Sprint', 'Cricket Wireless', 'Metro by T-Mobile', 'Straight Talk Wireless']
        }
    },

    # United Kingdom (Country Code: 44)
    44: {
        'patterns': {
            r'^447[0-1][0-9]{6}': 'EE (Orange/T-Mobile)',
            r'^447[4-9][0-9]{6}': 'Vodafone UK',
            r'^447[1-3][0-9]{6}': 'O2 UK',
            r'^447[5-6][0-9]{6}': 'Three UK',
            r'^447[2-3][0-9]{6}': 'Tesco Mobile',
            r'^447[8-9][0-9]{6}': 'giffgaff',
        },
        'location_carriers': {
            'default': ['EE', 'Vodafone UK', 'O2 UK', 'Three UK', 'Tesco Mobile', 'giffgaff', 'Sky Mobile', 'VOXI']
        }
    },

    # Germany (Country Code: 49)
    49: {
        'patterns': {
            r'^4915[0-9][0-9]{7}': 'T-Mobile Germany',
            r'^4917[0-9][0-9]{7}': 'Vodafone Germany',
            r'^4916[0-9][0-9]{7}': 'O2 Germany',
            r'^4919[0-9][0-9]{7}': 'E-Plus',
            r'^4915[2-5][0-9]{7}': 'congstar',
            r'^4916[3-5][0-9]{7}': 'Aldi Talk',
        },
        'location_carriers': {
            'default': ['Deutsche Telekom', 'Vodafone Germany', 'O2 Germany', 'E-Plus', 'congstar', 'Aldi Talk']
        }
    },

    # France (Country Code: 33)
    33: {
        'patterns': {
            r'^336[0-9][0-9]{6}': 'Orange France',
            r'^337[0-9][0-9]{6}': 'SFR',
            r'^334[0-9][0-9]{6}': 'Free Mobile',
            r'^335[0-9][0-9]{6}': 'Bouygues Telecom',
            r'^336[4-5][0-9]{6}': 'La Poste Mobile',
            r'^337[6-9][0-9]{6}': 'RED by SFR',
        },
        'location_carriers': {
            'default': ['Orange France', 'SFR', 'Free Mobile', 'Bouygues Telecom', 'La Poste Mobile', 'RED by SFR']
        }
    },

    # India (Country Code: 91)
    91: {
        'patterns': {
            r'^9198[0-9][0-9]{7}': 'Bharti Airtel',
            r'^9199[0-9][0-9]{7}': 'Vodafone Idea',
            r'^9197[0-9][0-9]{7}': 'Reliance Jio',
            r'^9196[0-9][0-9]{7}': 'BSNL',
            r'^9195[0-9][0-9]{7}': 'MTNL',
            r'^9194[0-9][0-9]{7}': 'Reliance Communications',
            r'^9193[0-9][0-9]{7}': 'Tata Indicom',
        },
        'location_carriers': {
            'default': ['Bharti Airtel', 'Vodafone Idea', 'Reliance Jio', 'BSNL', 'MTNL', 'Reliance Communications']
        }
    },

    # Australia (Country Code: 61)
    61: {
        'patterns': {
            r'^614[0-3][0-9]{6}': 'Telstra',
            r'^614[5-9][0-9]{6}': 'Optus',
            r'^614[2-4][0-9]{6}': 'Vodafone Australia',
            r'^615[0-9][0-9]{6}': 'TPG Telecom',
            r'^616[0-9][0-9]{6}': 'Amaysim',
        },
        'location_carriers': {
            'default': ['Telstra', 'Optus', 'Vodafone Australia', 'TPG Telecom', 'Amaysim', 'Boost Mobile']
        }
    },

    # China (Country Code: 86)
    86: {
        'patterns': {
            r'^8613[0-9][0-9]{8}': 'China Mobile',
            r'^8618[0-9][0-9]{8}': 'China Unicom',
            r'^8617[0-9][0-9]{8}': 'China Telecom',
            r'^8619[0-9][0-9]{8}': 'China Broadcasting Network',
        },
        'location_carriers': {
            'default': ['China Mobile', 'China Unicom', 'China Telecom', 'China Broadcasting Network']
        }
    },

    # Japan (Country Code: 81)
    81: {
        'patterns': {
            r'^8190[0-9]{8}': 'NTT DoCoMo',
            r'^8170[0-9]{8}': 'au (KDDI)',
            r'^8180[0-9]{8}': 'SoftBank',
            r'^8150[0-9]{8}': 'Y!mobile',
        },
        'location_carriers': {
            'default': ['NTT DoCoMo', 'au (KDDI)', 'SoftBank', 'Y!mobile', 'Rakuten Mobile']
        }
    },

    # South Korea (Country Code: 82)
    82: {
        'patterns': {
            r'^8210[0-9]{8}': 'SK Telecom',
            r'^8211[0-9]{8}': 'KT',
            r'^8219[0-9]{8}': 'LG U+',
        },
        'location_carriers': {
            'default': ['SK Telecom', 'KT', 'LG U+']
        }
    },

    # Brazil (Country Code: 55)
    55: {
        'patterns': {
            r'^5511[9][0-9]{8}': 'Vivo Brazil',
            r'^5511[8][0-9]{8}': 'TIM Brazil',
            r'^5511[7][0-9]{8}': 'Claro Brazil',
            r'^5511[6][0-9]{8}': 'Oi',
        },
        'location_carriers': {
            'default': ['Vivo', 'TIM', 'Claro', 'Oi', 'Nextel']
        }
    },

    # Russia (Country Code: 7)
    7: {
        'patterns': {
            r'^79[0-9]{9}': 'MTS Russia',
            r'^78[0-9]{9}': 'Beeline',
            r'^77[0-9]{9}': 'MegaFon',
            r'^76[0-9]{9}': 'Tele2 Russia',
        },
        'location_carriers': {
            'default': ['MTS', 'Beeline', 'MegaFon', 'Tele2', 'Rostelecom']
        }
    },

    # Mexico (Country Code: 52)
    52: {
        'patterns': {
            r'^52[1-9][0-9]{9}': 'Telcel',
            r'^525[5][0-9]{8}': 'Movistar Mexico',
            r'^525[6][0-9]{8}': 'AT&T Mexico',
        },
        'location_carriers': {
            'default': ['Telcel', 'Movistar', 'AT&T Mexico', 'Unefon']
        }
    },

    # Italy (Country Code: 39)
    39: {
        'patterns': {
            r'^393[0-9]{8}': 'TIM Italy',
            r'^394[0-9]{8}': 'Vodafone Italy',
            r'^395[0-9]{8}': 'Wind Tre',
            r'^396[0-9]{8}': 'Iliad Italy',
        },
        'location_carriers': {
            'default': ['TIM', 'Vodafone Italy', 'Wind Tre', 'Iliad', 'Fastweb Mobile']
        }
    },

    # Spain (Country Code: 34)
    34: {
        'patterns': {
            r'^346[0-9]{8}': 'Movistar Spain',
            r'^347[0-9]{8}': 'Vodafone Spain',
            r'^348[0-9]{8}': 'Orange Spain',
            r'^349[0-9]{8}': 'Yoigo',
        },
        'location_carriers': {
            'default': ['Movistar', 'Vodafone Spain', 'Orange Spain', 'Yoigo', 'MsMvil']
        }
    },

    # Netherlands (Country Code: 31)
    31: {
        'patterns': {
            r'^316[0-9]{8}': 'KPN',
            r'^317[0-9]{8}': 'Vodafone Netherlands',
            r'^318[0-9]{8}': 'T-Mobile Netherlands',
        },
        'location_carriers': {
            'default': ['KPN', 'Vodafone Netherlands', 'T-Mobile Netherlands', 'Tele2 Netherlands']
        }
    },

    # Belgium (Country Code: 32)
    32: {
        'patterns': {
            r'^324[0-9]{8}': 'Proximus',
            r'^325[0-9]{8}': 'Orange Belgium',
            r'^326[0-9]{8}': 'Telenet',
        },
        'location_carriers': {
            'default': ['Proximus', 'Orange Belgium', 'Telenet', 'Base']
        }
    },

    # Switzerland (Country Code: 41)
    41: {
        'patterns': {
            r'^417[0-9]{8}': 'Swisscom',
            r'^418[0-9]{8}': 'Sunrise',
            r'^419[0-9]{8}': 'Salt Mobile',
        },
        'location_carriers': {
            'default': ['Swisscom', 'Sunrise', 'Salt Mobile']
        }
    },

    # Austria (Country Code: 43)
    43: {
        'patterns': {
            r'^436[0-9]{8}': 'A1 Telekom Austria',
            r'^437[0-9]{8}': 'T-Mobile Austria',
            r'^438[0-9]{8}': 'Drei Austria',
        },
        'location_carriers': {
            'default': ['A1 Telekom Austria', 'T-Mobile Austria', 'Drei Austria']
        }
    },

    # Sweden (Country Code: 46)
    46: {
        'patterns': {
            r'^467[0-9]{8}': 'Telia Sweden',
            r'^468[0-9]{8}': 'Telenor Sweden',
            r'^469[0-9]{8}': 'Tre Sweden',
        },
        'location_carriers': {
            'default': ['Telia', 'Telenor', 'Tre Sweden', 'Tele2 Sweden']
        }
    },

    # Norway (Country Code: 47)
    47: {
        'patterns': {
            r'^479[0-9]{7}': 'Telenor Norway',
            r'^474[0-9]{7}': 'Telia Norway',
            r'^459[0-9]{7}': 'Ice Norway',
        },
        'location_carriers': {
            'default': ['Telenor', 'Telia Norway', 'Ice', 'TDC Norway']
        }
    },

    # Denmark (Country Code: 45)
    45: {
        'patterns': {
            r'^452[0-9]{7}': 'TDC Denmark',
            r'^454[0-9]{7}': 'Telenor Denmark',
            r'^459[0-9]{7}': '3 Denmark',
        },
        'location_carriers': {
            'default': ['TDC', 'Telenor Denmark', '3 Denmark', 'Telia Denmark']
        }
    },

    # Finland (Country Code: 358)
    358: {
        'patterns': {
            r'^35840[0-9]{7}': 'Elisa Finland',
            r'^35850[0-9]{7}': 'Telia Finland',
            r'^35844[0-9]{7}': 'DNA Finland',
        },
        'location_carriers': {
            'default': ['Elisa', 'Telia Finland', 'DNA']
        }
    },

    # Poland (Country Code: 48)
    48: {
        'patterns': {
            r'^485[0-9]{8}': 'Orange Polska',
            r'^486[0-9]{8}': 'T-Mobile Poland',
            r'^487[0-9]{8}': 'Plus',
            r'^488[0-9]{8}': 'Play',
        },
        'location_carriers': {
            'default': ['Orange Polska', 'T-Mobile Poland', 'Plus', 'Play']
        }
    },

    # Turkey (Country Code: 90)
    90: {
        'patterns': {
            r'^905[0-9]{8}': 'Turkcell',
            r'^905[3-4][0-9]{7}': 'Vodafone Turkey',
            r'^905[5-6][0-9]{7}': 'Trk Telekom',
        },
        'location_carriers': {
            'default': ['Turkcell', 'Vodafone Turkey', 'Trk Telekom']
        }
    },

    # South Africa (Country Code: 27)
    27: {
        'patterns': {
            r'^2782[0-9]{7}': 'Vodacom',
            r'^2783[0-9]{7}': 'MTN South Africa',
            r'^2784[0-9]{7}': 'Cell C',
        },
        'location_carriers': {
            'default': ['Vodacom', 'MTN', 'Cell C', 'Telkom Mobile']
        }
    },

    # Egypt (Country Code: 20)
    20: {
        'patterns': {
            r'^2010[0-9]{8}': 'Orange Egypt',
            r'^2011[0-9]{8}': 'Etisalat Egypt',
            r'^2012[0-9]{8}': 'Vodafone Egypt',
        },
        'location_carriers': {
            'default': ['Orange Egypt', 'Etisalat Egypt', 'Vodafone Egypt', 'WE (Telecom Egypt)']
        }
    },

    # Nigeria (Country Code: 234)
    234: {
        'patterns': {
            r'^2348[0-9]{8}': 'MTN Nigeria',
            r'^2347[0-9]{8}': 'Airtel Nigeria',
            r'^2349[0-9]{8}': 'Glo Mobile',
            r'^2340[0-9]{8}': '9mobile',
        },
        'location_carriers': {
            'default': ['MTN Nigeria', 'Airtel Nigeria', 'Glo Mobile', '9mobile']
        }
    },

    # Kenya (Country Code: 254)
    254: {
        'patterns': {
            r'^2547[0-9]{8}': 'Safaricom',
            r'^2541[0-9]{8}': 'Airtel Kenya',
            r'^2542[0-9]{8}': 'Telkom Kenya',
        },
        'location_carriers': {
            'default': ['Safaricom', 'Airtel Kenya', 'Telkom Kenya']
        }
    },

    # Thailand (Country Code: 66)
    66: {
        'patterns': {
            r'^668[0-9]{8}': 'AIS Thailand',
            r'^669[0-9]{8}': 'dtac',
            r'^666[0-9]{8}': 'TrueMove H',
        },
        'location_carriers': {
            'default': ['AIS', 'dtac', 'TrueMove H', 'NT Mobile']
        }
    },

    # Vietnam (Country Code: 84)
    84: {
        'patterns': {
            r'^843[0-9]{8}': 'Viettel',
            r'^849[0-9]{8}': 'MobiFone',
            r'^847[0-9]{8}': 'VinaPhone',
        },
        'location_carriers': {
            'default': ['Viettel', 'MobiFone', 'VinaPhone', 'Vietnamobile']
        }
    },

    # Indonesia (Country Code: 62)
    62: {
        'patterns': {
            r'^6281[0-9]{8}': 'Telkomsel',
            r'^6285[0-9]{8}': 'Indosat Ooredoo',
            r'^6289[0-9]{8}': 'XL Axiata',
            r'^6283[0-9]{8}': 'Tri Indonesia',
        },
        'location_carriers': {
            'default': ['Telkomsel', 'Indosat Ooredoo', 'XL Axiata', 'Tri Indonesia', 'Smartfren']
        }
    },

    # Malaysia (Country Code: 60)
    60: {
        'patterns': {
            r'^601[0-9]{8}': 'Maxis',
            r'^6014[0-9]{7}': 'Digi',
            r'^6013[0-9]{7}': 'Celcom',
            r'^6017[0-9]{7}': 'U Mobile',
        },
        'location_carriers': {
            'default': ['Maxis', 'Digi', 'Celcom', 'U Mobile', 'TuneTalk']
        }
    },

    # Philippines (Country Code: 63)
    63: {
        'patterns': {
            r'^639[0-9]{9}': 'Globe Telecom',
            r'^6391[0-9]{8}': 'Smart Communications',
            r'^6392[0-9]{8}': 'Sun Cellular',
        },
        'location_carriers': {
            'default': ['Globe Telecom', 'Smart Communications', 'Sun Cellular', 'DITO Telecommunity']
        }
    },

    # Singapore (Country Code: 65)
    65: {
        'patterns': {
            r'^658[0-9]{7}': 'Singtel',
            r'^659[0-9]{7}': 'StarHub',
            r'^653[0-9]{7}': 'M1',
        },
        'location_carriers': {
            'default': ['Singtel', 'StarHub', 'M1', 'TPG Telecom Singapore']
        }
    },

    # Argentina (Country Code: 54)
    54: {
        'patterns': {
            r'^5411[0-9]{8}': 'Movistar Argentina',
            r'^5491[0-9]{8}': 'Claro Argentina',
            r'^5493[0-9]{8}': 'Personal',
        },
        'location_carriers': {
            'default': ['Movistar Argentina', 'Claro Argentina', 'Personal', 'Tuenti']
        }
    },

    # Chile (Country Code: 56)
    56: {
        'patterns': {
            r'^569[0-9]{8}': 'Movistar Chile',
            r'^5695[0-9]{7}': 'Claro Chile',
            r'^5698[0-9]{7}': 'Entel Chile',
            r'^5697[0-9]{7}': 'WOM Chile',
        },
        'location_carriers': {
            'default': ['Movistar Chile', 'Claro Chile', 'Entel Chile', 'WOM Chile']
        }
    },

    # Colombia (Country Code: 57)
    57: {
        'patterns': {
            r'^573[0-9]{8}': 'Claro Colombia',
            r'^571[0-9]{8}': 'Movistar Colombia',
            r'^575[0-9]{8}': 'Tigo Colombia',
        },
        'location_carriers': {
            'default': ['Claro Colombia', 'Movistar Colombia', 'Tigo Colombia', 'Avantel']
        }
    },

    # Peru (Country Code: 51)
    51: {
        'patterns': {
            r'^519[0-9]{8}': 'Movistar Peru',
            r'^5194[0-9]{7}': 'Claro Peru',
            r'^5195[0-9]{7}': 'Bitel',
        },
        'location_carriers': {
            'default': ['Movistar Peru', 'Claro Peru', 'Bitel', 'Entel Peru']
        }
    },

    # Venezuela (Country Code: 58)
    58: {
        'patterns': {
            r'^584[0-9]{8}': 'Movistar Venezuela',
            r'^5841[0-9]{7}': 'Digitel',
        },
        'location_carriers': {
            'default': ['Movistar Venezuela', 'Digitel', 'CANTV Mvil']
        }
    },

    # Israel (Country Code: 972)
    972: {
        'patterns': {
            r'^97250[0-9]{7}': 'Cellcom',
            r'^97252[0-9]{7}': 'Partner',
            r'^97254[0-9]{7}': 'Pelephone',
        },
        'location_carriers': {
            'default': ['Cellcom', 'Partner', 'Pelephone', 'Hot Mobile']
        }
    },

    # UAE (Country Code: 971)
    971: {
        'patterns': {
            r'^97150[0-9]{7}': 'Etisalat UAE',
            r'^97155[0-9]{7}': 'du',
        },
        'location_carriers': {
            'default': ['Etisalat', 'du']
        }
    },

    # Saudi Arabia (Country Code: 966)
    966: {
        'patterns': {
            r'^96650[0-9]{7}': 'STC Saudi Arabia',
            r'^96656[0-9]{7}': 'Mobily',
            r'^96658[0-9]{7}': 'Zain Saudi Arabia',
        },
        'location_carriers': {
            'default': ['STC', 'Mobily', 'Zain Saudi Arabia', 'Virgin Mobile Saudi Arabia']
        }
    }
}

def get_specific_ny_location(phone_number_str, parsed_number):
    """Get specific New York city/region based on area code and exchange."""
    if parsed_number.country_code != 1:
        return None

    # New York State area code to city mapping
    NY_AREA_CODES = {
        212: {"city": "Manhattan, New York City", "lat": 40.7831, "lng": -73.9712},
        315: {"city": "Syracuse", "lat": 43.0481, "lng": -76.1474},
        347: {"city": "Bronx/Brooklyn/Queens, New York City", "lat": 40.6892, "lng": -74.0445},
        516: {"city": "Nassau County (Long Island)", "lat": 40.6546, "lng": -73.5594},
        518: {"city": "Albany", "lat": 42.6526, "lng": -73.7562},
        585: {"city": "Rochester", "lat": 43.1566, "lng": -77.6088},
        607: {"city": "Binghamton/Ithaca", "lat": 42.0987, "lng": -75.9180},
        631: {"city": "Suffolk County (Long Island)", "lat": 40.8176, "lng": -73.1365},
        646: {"city": "Manhattan, New York City", "lat": 40.7831, "lng": -73.9712},
        680: {"city": "Syracuse", "lat": 43.0481, "lng": -76.1474},
        716: {"city": "Buffalo", "lat": 42.8864, "lng": -78.8784},
        718: {"city": "Brooklyn/Queens/Bronx/Staten Island", "lat": 40.6892, "lng": -74.0445},
        845: {"city": "Hudson Valley (Poughkeepsie/Newburgh)", "lat": 41.7004, "lng": -74.0113},
        914: {"city": "Westchester County (White Plains/Yonkers)", "lat": 41.0340, "lng": -73.7629},
        917: {"city": "New York City (Mobile/Pagers)", "lat": 40.7589, "lng": -73.9851},
        929: {"city": "Bronx/Brooklyn/Queens, New York City", "lat": 40.6892, "lng": -74.0445}
    }

    national_str = str(parsed_number.national_number)
    if len(national_str) >= 3:
        area_code = int(national_str[:3])
        if area_code in NY_AREA_CODES:
            return NY_AREA_CODES[area_code]

    return None

def get_specific_wi_location(phone_number_str, parsed_number):
    """Get specific Wisconsin city/region based on area code and exchange."""
    if parsed_number.country_code != 1:
        return None

    # Wisconsin State area code to city mapping
    WI_AREA_CODES = {
        262: {"city": "Waukesha County", "lat": 43.0116, "lng": -88.2314},
        274: {"city": "Green Bay", "lat": 44.5133, "lng": -88.0133},
        414: {"city": "Milwaukee", "lat": 43.0389, "lng": -87.9065},
        534: {"city": "Eau Claire", "lat": 44.8113, "lng": -91.4985},
        608: {"city": "Madison", "lat": 43.0731, "lng": -89.4012},
        715: {"city": "Wausau", "lat": 44.9591, "lng": -89.6301},
        920: {"city": "Appleton", "lat": 44.2619, "lng": -88.4154}
    }

    national_str = str(parsed_number.national_number)
    if len(national_str) >= 3:
        area_code = int(national_str[:3])
        if area_code in WI_AREA_CODES:
            return WI_AREA_CODES[area_code]

    return None

def get_worldwide_area_code_location(parsed_number):
    """Get detailed location from worldwide area code database."""
    try:
        country_code = parsed_number.country_code
        national_number = str(parsed_number.national_number)
        
        if country_code in WORLDWIDE_AREA_CODES:
            area_codes = WORLDWIDE_AREA_CODES[country_code]
            
            # For North America (country code 1), extract 3-digit area code
            if country_code == 1 and len(national_number) >= 3:
                area_code = int(national_number[:3])
                if area_code in area_codes:
                    return area_codes[area_code], f"Area Code Database (+{country_code})"
            
            # For UK (country code 44), handle various area code formats
            elif country_code == 44:
                # Try 3-digit area codes first (like 113 for Leeds)
                if len(national_number) >= 3:
                    area_code_3 = int(national_number[:3])
                    if area_code_3 in area_codes:
                        return area_codes[area_code_3], "UK Area Code Database"
                
                # Try 4-digit area codes (like 1204 for Bolton)
                if len(national_number) >= 4:
                    area_code_4 = int(national_number[:4])
                    if area_code_4 in area_codes:
                        return area_codes[area_code_4], "UK Area Code Database"
            
            # For Germany (country code 49), handle variable length area codes
            elif country_code == 49:
                # Try 2-digit area codes first (major cities like 30 for Berlin)
                if len(national_number) >= 2:
                    area_code_2 = int(national_number[:2])
                    if area_code_2 in area_codes:
                        return area_codes[area_code_2], "German Area Code Database"
                
                # Try 3-digit area codes
                if len(national_number) >= 3:
                    area_code_3 = int(national_number[:3])
                    if area_code_3 in area_codes:
                        return area_codes[area_code_3], "German Area Code Database"
                
                # Try 4-digit area codes
                if len(national_number) >= 4:
                    area_code_4 = int(national_number[:4])
                    if area_code_4 in area_codes:
                        return area_codes[area_code_4], "German Area Code Database"
            
            # For France (country code 33), use first digit for regional identification
            elif country_code == 33:
                if len(national_number) >= 1:
                    region_code = int(national_number[0])
                    if region_code in area_codes:
                        return area_codes[region_code], "French Regional Database"
            
            # For Japan (country code 81), handle city codes
            elif country_code == 81:
                # Try 1-digit area codes (Tokyo = 3)
                if len(national_number) >= 1:
                    area_code_1 = int(national_number[:1])
                    if area_code_1 in area_codes:
                        return area_codes[area_code_1], "Japanese Area Code Database"
                
                # Try 2-digit area codes
                if len(national_number) >= 2:
                    area_code_2 = int(national_number[:2])
                    if area_code_2 in area_codes:
                        return area_codes[area_code_2], "Japanese Area Code Database"
                
                # Try 3-digit area codes
                if len(national_number) >= 3:
                    area_code_3 = int(national_number[:3])
                    if area_code_3 in area_codes:
                        return area_codes[area_code_3], "Japanese Area Code Database"
            
            # For Australia (country code 61), use first digit for state
            elif country_code == 61:
                if len(national_number) >= 1:
                    state_code = int(national_number[0])
                    if state_code in area_codes:
                        return area_codes[state_code], "Australian State Database"
            
            # For China (country code 86), handle city codes
            elif country_code == 86:
                # Try 2-digit area codes (major cities like 10 for Beijing)
                if len(national_number) >= 2:
                    area_code_2 = int(national_number[:2])
                    if area_code_2 in area_codes:
                        return area_codes[area_code_2], "Chinese Area Code Database"
                
                # Try 3-digit area codes
                if len(national_number) >= 3:
                    area_code_3 = int(national_number[:3])
                    if area_code_3 in area_codes:
                        return area_codes[area_code_3], "Chinese Area Code Database"
            
            # For India (country code 91), handle STD codes
            elif country_code == 91:
                # Try 2-digit STD codes (major cities like 11 for Delhi)
                if len(national_number) >= 2:
                    std_code_2 = int(national_number[:2])
                    if std_code_2 in area_codes:
                        return area_codes[std_code_2], "Indian STD Code Database"
                
                # Try 3-digit STD codes
                if len(national_number) >= 3:
                    std_code_3 = int(national_number[:3])
                    if std_code_3 in area_codes:
                        return area_codes[std_code_3], "Indian STD Code Database"
                
                # Try 4-digit STD codes
                if len(national_number) >= 4:
                    std_code_4 = int(national_number[:4])
                    if std_code_4 in area_codes:
                        return area_codes[std_code_4], "Indian STD Code Database"
        
        return None, None
        
    except (ValueError, IndexError):
        return None, None

def get_geolocation_info(location_description, phone_number_str=None, parsed_number=None):
    """Get detailed geolocation information and create an interactive map."""
    if not location_description or location_description == "Unknown":
        return None, None, None

    # First try worldwide area code database for enhanced location detection
    if parsed_number:
        enhanced_location, source = get_worldwide_area_code_location(parsed_number)
        if enhanced_location:
            location_description = enhanced_location
            print(f"   Enhanced Location: {WHITE}{enhanced_location}{RESET} (via {source})")

    # Check for specific NY location if it's a NY number
    if "New York" in location_description and parsed_number:
        ny_location = get_specific_ny_location(phone_number_str, parsed_number)
        if ny_location:
            location_description = ny_location["city"]
            specific_lat = ny_location["lat"]
            specific_lng = ny_location["lng"]

            # Create map with specific coordinates
            map_file = create_location_map(specific_lat, specific_lng, location_description, 
                                         f"{location_description}, New York, United States")

            return {
                'latitude': specific_lat,
                'longitude': specific_lng,
                'formatted_address': f"{location_description}, New York, United States",
                'components': {
                    'city': location_description.split(',')[0],
                    'state': 'New York',
                    'country': 'United States'
                },
                'map_file': map_file,
                'source': 'NY Area Code Database'
            }, specific_lat, specific_lng

    # Check for specific Wisconsin location if it's a WI number
    if "Wisconsin" in location_description and parsed_number:
        wi_location = get_specific_wi_location(phone_number_str, parsed_number)
        if wi_location:
            location_description = wi_location["city"]
            specific_lat = wi_location["lat"]
            specific_lng = wi_location["lng"]

            # Create map with specific coordinates
            map_file = create_location_map(specific_lat, specific_lng, location_description, 
                                         f"{location_description}, Wisconsin, United States")

            return {
                'latitude': specific_lat,
                'longitude': specific_lng,
                'formatted_address': f"{location_description}, Wisconsin, United States",
                'components': {
                    'city': location_description.split(',')[0],
                    'state': 'Wisconsin',
                    'country': 'United States'
                },
                'map_file': map_file,
                'source': 'WI Area Code Database'
            }, specific_lat, specific_lng

    try:
        # Try to use OpenCage API first (highest precision)
        api_key = os.getenv('OPENCAGE_API_KEY', '2e6e2191a2784b54961e68e40881d6bf')

        if api_key:
            geocoder_client = OpenCageGeocode(api_key)
            results = geocoder_client.geocode(location_description)

            if results and len(results) > 0:
                result = results[0]
                lat = result['geometry']['lat']
                lng = result['geometry']['lng']

                # Get detailed address components
                components = result['components']
                formatted_address = result['formatted']

                # Create interactive map
                map_file = create_location_map(lat, lng, location_description, formatted_address)

                return {
                    'latitude': lat,
                    'longitude': lng,
                    'formatted_address': formatted_address,
                    'components': components,
                    'map_file': map_file,
                    'source': 'OpenCage Geocoder (High Precision)'
                }, lat, lng

        # Fallback to geocoder library for additional precision
        try:
            g = geo_lib.osm(location_description)
            if g.ok:
                lat, lng = g.latlng
                formatted_address = g.address or location_description

                # Create interactive map
                map_file = create_location_map(lat, lng, location_description, formatted_address)

                return {
                    'latitude': lat,
                    'longitude': lng,
                    'formatted_address': formatted_address,
                    'components': {
                        'city': g.city or 'Unknown',
                        'state': g.state or 'Unknown',
                        'country': g.country or 'Unknown',
                        'postcode': g.postal or 'Unknown'
                    },
                    'map_file': map_file,
                    'source': 'OpenStreetMap Geocoder'
                }, lat, lng
        except Exception as e:
            print(f"Geocoder fallback failed: {e}")

        # Additional fallback using Google geocoder (if needed)
        try:
            g = geo_lib.google(location_description)
            if g.ok:
                lat, lng = g.latlng
                formatted_address = g.address or location_description

                # Create interactive map
                map_file = create_location_map(lat, lng, location_description, formatted_address)

                return {
                    'latitude': lat,
                    'longitude': lng,
                    'formatted_address': formatted_address,
                    'components': {
                        'city': g.city or 'Unknown',
                        'state': g.state or 'Unknown',
                        'country': g.country or 'Unknown',
                        'postcode': g.postal or 'Unknown'
                    },
                    'map_file': map_file,
                    'source': 'Google Geocoder (Fallback)'
                }, lat, lng
        except Exception as e:
            print(f"Google geocoder fallback failed: {e}")

        # Final fallback to basic location info without API
        return {
            'formatted_address': location_description,
            'note': 'Set OPENCAGE_API_KEY environment variable for detailed coordinates'
        }, None, None

    except Exception as e:
        return {
            'error': f"Geolocation lookup failed: {str(e)}",
            'formatted_address': location_description
        }, None, None

def is_person_name(text):
    """Check if text looks like a person's name."""
    if not text or len(text) < 4 or len(text) > 50:
        return False
    
    # Remove leading/trailing whitespace
    text = text.strip()
    
    # Check for common non-name patterns
    non_name_patterns = [
        'phone', 'number', 'lookup', 'search', 'caller', 'id', 'directory',
        'report', 'background', 'check', 'public', 'records', 'information',
        'details', 'contact', 'owner', 'service', 'mobile', 'landline',
        'wireless', 'carrier', 'provider', 'company', 'inc', 'corp', 'llc'
    ]
    
    text_lower = text.lower()
    for pattern in non_name_patterns:
        if pattern in text_lower:
            return False
    
    # Basic name pattern: should have 2-4 words, each starting with capital
    words = text.split()
    if len(words) < 2 or len(words) > 4:
        return False
    
    for word in words:
        if not word[0].isupper() or not word[1:].islower() or not word.isalpha():
            return False
    
    return True

def extract_names_from_text(text, phone_number):
    """Extract potential person names from text content."""
    names = []
    
    # Remove the phone number itself from text to avoid false matches
    clean_text = text.replace(phone_number, '').replace(phone_number.replace('+1', ''), '')
    
    # Look for patterns that might be names
    name_pattern = re.compile(r'\b[A-Z][a-z]{2,15}\s+[A-Z][a-z]{2,15}\b')
    matches = name_pattern.findall(clean_text)
    
    for match in matches:
        if is_person_name(match):
            names.append(match.strip())
    
    # Remove duplicates while preserving order
    seen = set()
    unique_names = []
    for name in names:
        if name not in seen:
            seen.add(name)
            unique_names.append(name)
    
    return unique_names[:5]  # Return top 5 potential names

def clean_name(text):
    """Clean and extract actual names from scraped text."""
    if not text:
        return None

    # Remove common non-name phrases
    unwanted_phrases = [
        'reverse phone lookup', 'phone number lookup', 'caller id', 'search results',
        'whitepages', 'spokeo', 'truecaller', 'phone number', 'lookup', 'search',
        'find', 'owner', 'name', 'directory', 'report', 'background check',
        'public records', 'contact info', 'details', 'information'
    ]

    # Clean the text
    cleaned = text.lower().strip()

    # Remove unwanted phrases
    for phrase in unwanted_phrases:
        cleaned = cleaned.replace(phrase, '')

    # Split into words and look for potential names
    words = cleaned.split()
    potential_names = []

    # Look for sequences of capitalized words that could be names
    i = 0
    while i < len(words):
        word = words[i].strip('.,!?;:()[]{}"\'-')
        if word and len(word) > 1 and word.isalpha():
            # Check if this could be a first name
            if i + 1 < len(words):
                next_word = words[i + 1].strip('.,!?;:()[]{}"\'-')
                if next_word and len(next_word) > 1 and next_word.isalpha():
                    # Found potential first and last name
                    potential_name = f"{word.title()} {next_word.title()}"
                    potential_names.append(potential_name)
                    i += 2
                    continue
        i += 1

    # Return the most reasonable looking name
    for name in potential_names:
        # Basic validation - avoid obviously wrong names
        if len(name) >= 4 and len(name) <= 50:
            return name

    return None

def get_phone_number_name(phone_number_str, parsed_number):
    """Get the name associated with a phone number focusing on person names."""
    names_found = {}
    extracted_names = []

    try:
        # Format number for web scraping
        e164_number = phonenumbers.format_number(parsed_number, phonenumbers.PhoneNumberFormat.E164)
        clean_number = phone_number_str.replace('+', '').replace('-', '').replace(' ', '').replace('(', '').replace(')', '')

        # Priority 1: Try web scraping for actual person names
        try:
            scraped_results = scrape_phone_number_info(clean_number, e164_number)
            if scraped_results and not scraped_results.get('general_error'):
                # Extract and clean names from all sources
                web_sources = ['truecaller.com', 'fastpeoplesearch.com', 'spokeo.com', 'search_engine']
                
                for source in web_sources:
                    if source in scraped_results and 'name' in scraped_results[source]:
                        raw_name = scraped_results[source]['name']
                        cleaned_name = clean_name(raw_name)
                        
                        # Additional validation for person names
                        if cleaned_name and is_person_name(cleaned_name):
                            extracted_names.append(cleaned_name)

                # Only show scraping results if we found actual names
                if extracted_names:
                    names_found['raw_scraping_results'] = scraped_results
                else:
                    names_found['web_scraping_note'] = "No person names found in public directories"
            else:
                names_found['web_scraping_note'] = "Unable to search public name directories"

        except Exception as e:
            names_found['web_scraping_error'] = f"Name search error: {str(e)}"

        # Process extracted names to find the most reliable one
        if extracted_names:
            # Count occurrences of each name
            name_counts = {}
            for name in extracted_names:
                name_counts[name] = name_counts.get(name, 0) + 1

            # Find the most common name
            most_common_name = max(name_counts, key=name_counts.get)
            confidence_score = name_counts[most_common_name]
            total_sources = len(extracted_names)

            names_found['primary_name'] = {
                'name': most_common_name,
                'confidence_score': confidence_score,
                'total_sources': total_sources,
                'all_names_found': list(set(extracted_names))
            }
            
            return names_found  # Return early if we found person names

        # If no person names found, return minimal results
        return names_found

    except Exception as e:
        return {'error': f"Name lookup failed: {str(e)}"}

def create_location_map(lat, lng, location_name, formatted_address):
    """Create an interactive map using Folium."""
    try:
        # Create map centered on the location
        m = folium.Map(
            location=[lat, lng],
            zoom_start=10,
            tiles='OpenStreetMap'
        )

        # Add marker for the location
        folium.Marker(
            [lat, lng],
            popup=folium.Popup(f"""
                <div style="font-family: Arial, sans-serif;">
                    <h4 style="color: #2c3e50; margin-bottom: 10px;">Phone Number Location</h4>
                    <p><strong>Location:</strong> {location_name}</p>
                    <p><strong>Address:</strong> {formatted_address}</p>
                    <p><strong>Coordinates:</strong> {lat:.6f}, {lng:.6f}</p>
                    <p style="color: #7f8c8d; font-size: 12px;">Generated by Phone Number Analyzer</p>
                </div>
            """, max_width=350),
            tooltip=f" {location_name} - Click for details",
            icon=folium.Icon(color='red', icon='phone', prefix='fa')
        ).add_to(m)

        # Add circle to show general area
        folium.Circle(
            location=[lat, lng],
            radius=5000,  # 5km radius
            color='blue',
            fill=True,
            opacity=0.3,
            popup=f"Approximate coverage area for {location_name}"
        ).add_to(m)

        # Save map to HTML file
        map_filename = f"phone_location_map_{int(time.time())}.html"
        m.save(map_filename)

        return map_filename

    except Exception as e:
        print(f"{RED}Error creating map: {e}{RESET}")
        return None

def detect_carrier_advanced(parsed_number, location):
    """Advanced carrier detection using patterns and location data."""
    country_code = parsed_number.country_code
    full_number = f"{country_code}{parsed_number.national_number}"

    # First try the official phonenumbers library
    official_carrier = carrier.name_for_number(parsed_number, "en")
    if official_carrier:
        return official_carrier, "Official Database"

    # Try pattern matching
    if country_code in CARRIER_DATABASE:
        db = CARRIER_DATABASE[country_code]

        # Check patterns
        for pattern, carrier_name in db['patterns'].items():
            if re.match(pattern, full_number):
                return carrier_name, "Pattern Match"

        # Fallback to location-based carriers
        location_carriers = db['location_carriers']
        if location and location in location_carriers:
            carriers = location_carriers[location]
            return f"Likely: {carriers[0]} (Common in {location})", "Location Inference"
        elif 'default' in location_carriers:
            carriers = location_carriers['default']
            return f"Possible: {carriers[0]} (Major carrier in country)", "Country Inference"

    # Final fallback - generic carrier types
    mobile_patterns = [
        r'.*[67][0-9]{8}',  # Common mobile patterns
        r'.*[89][0-9]{8}',
    ]

    for pattern in mobile_patterns:
        if re.match(pattern, str(parsed_number.national_number)):
            return "Mobile Carrier (Pattern detected)", "Generic Pattern"

    return "Unknown", "No Detection Method"

def scrape_phone_number_info(phone_number, e164_number):
    """Scrape phone number information from multiple sources to find person names."""
    results = {}

    # Headers to mimic a real browser
    headers = {
        'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36',
        'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
        'Accept-Language': 'en-US,en;q=0.5',
        'Accept-Encoding': 'gzip, deflate',
        'Connection': 'keep-alive',
    }

    try:
        # Method 1: Search for person names using multiple name lookup services
        try:
            # Try reverse phone lookup services that focus on person names
            search_urls = [
                f"https://www.truecaller.com/search/us/{urllib.parse.quote(phone_number)}",
                f"https://www.fastpeoplesearch.com/phone-number/{phone_number.replace('+1', '')}",
                f"https://www.spokeo.com/phone-search/{phone_number}",
            ]
            
            for url in search_urls:
                try:
                    response = requests.get(url, headers=headers, timeout=8)
                    
                    if response.status_code == 200:
                        soup = BeautifulSoup(response.content, 'html.parser')
                        
                        # Look for person names specifically
                        name_patterns = [
                            # Common patterns for names on lookup sites
                            soup.find_all(['h1', 'h2', 'h3'], string=re.compile(r'^[A-Z][a-z]+ [A-Z][a-z]+$')),
                            soup.find_all(['div', 'span'], class_=re.compile(r'name|person|owner', re.I)),
                            soup.find_all(['div', 'span'], attrs={'data-name': True}),
                            soup.find_all(string=re.compile(r'^[A-Z][a-z]{2,15} [A-Z][a-z]{2,15}$')),
                        ]
                        
                        for pattern_group in name_patterns:
                            for element in pattern_group:
                                if hasattr(element, 'get_text'):
                                    text = element.get_text().strip()
                                else:
                                    text = str(element).strip()
                                
                                # Validate if this looks like a person's name
                                if is_person_name(text):
                                    source_name = url.split('//')[1].split('/')[0].replace('www.', '')
                                    results[source_name] = {
                                        'name': text,
                                        'source': source_name.title(),
                                        'confidence': 'High'
                                    }
                                    break
                            if source_name in results:
                                break
                                
                except Exception:
                    continue

        except Exception as e:
            results['lookup_error'] = f"Name lookup failed: {str(e)}"

        # Method 2: Use alternative search approach focusing on names
        try:
            # Search using generic search patterns for names
            clean_phone = phone_number.replace('+', '').replace('-', '').replace(' ', '').replace('(', '').replace(')', '')
            
            # Try a generic search that might return person information
            search_terms = [
                f'"{phone_number}" name owner',
                f'"{clean_phone}" person name',
                f'phone number {phone_number} belongs to'
            ]
            
            for term in search_terms:
                try:
                    # This would be a generic search - in practice might need different approach
                    search_url = f"https://duckduckgo.com/?q={urllib.parse.quote(term)}"
                    response = requests.get(search_url, headers=headers, timeout=8)
                    
                    if response.status_code == 200:
                        soup = BeautifulSoup(response.content, 'html.parser')
                        
                        # Look for potential names in search results
                        text_content = soup.get_text()
                        potential_names = extract_names_from_text(text_content, phone_number)
                        
                        if potential_names:
                            results['search_engine'] = {
                                'name': potential_names[0],
                                'source': 'Search Engine',
                                'confidence': 'Medium',
                                'all_found': potential_names
                            }
                            break
                            
                except Exception:
                    continue

        except Exception as e:
            results['search_error'] = f"Search lookup failed: {str(e)}"

    except Exception as e:
        return {'general_error': f"Name scraping failed: {str(e)}"}

    return results

def get_complete_phone_info(phone_number_str):
    """Get all possible information about a phone number."""

    print(f"\n{BRIGHT_GREEN}{'='*70}")
    print(f"{BOLD} COMPLETE PHONE NUMBER INFORMATION ")
    print(f"{'='*70}{RESET}\n")

    start_time = time.time()

    try:
        # Parse the phone number
        parsed_number = phonenumbers.parse(phone_number_str, None)

        print(f"{CYAN} Input Number:{RESET} {WHITE}{phone_number_str}{RESET}")
        print(f"{CYAN} Analysis Status:{RESET} {GREEN}Processing...{RESET}\n")

        # Validation checks
        is_valid = phonenumbers.is_valid_number(parsed_number)
        is_possible = phonenumbers.is_possible_number(parsed_number)

        print(f"{CYAN} Validation Results:{RESET}")
        print(f"   Valid Number: {GREEN if is_valid else RED}{'Yes' if is_valid else 'No'}{RESET}")
        print(f"   Possible Number: {GREEN if is_possible else RED}{'Yes' if is_possible else 'No'}{RESET}\n")

        if not is_valid:
            print(f"{RED} Invalid phone number format - cannot proceed with analysis{RESET}")
            return

        # Number formatting
        print(f"{CYAN} Number Formats:{RESET}")
        print(f"   E164 Format: {WHITE}{phonenumbers.format_number(parsed_number, phonenumbers.PhoneNumberFormat.E164)}{RESET}")
        print(f"   International: {WHITE}{phonenumbers.format_number(parsed_number, phonenumbers.PhoneNumberFormat.INTERNATIONAL)}{RESET}")
        print(f"   National: {WHITE}{phonenumbers.format_number(parsed_number, phonenumbers.PhoneNumberFormat.NATIONAL)}{RESET}")
        print(f"   RFC3966: {WHITE}{phonenumbers.format_number(parsed_number, phonenumbers.PhoneNumberFormat.RFC3966)}{RESET}\n")

        # Geographic information
        location = phonenumbers.geocoder.description_for_number(parsed_number, "en")
        print(f"{CYAN} Geographic Information:{RESET}")
        print(f"   Location: {WHITE}{location if location else 'Unknown'}{RESET}")
        print(f"   Country Code: {WHITE}+{parsed_number.country_code}{RESET}")
        print(f"   National Number: {WHITE}{parsed_number.national_number}{RESET}\n")

        # Detailed Geolocation with Map
        geo_info, lat, lng = get_geolocation_info(location, phone_number_str, parsed_number)
        print(f"{CYAN}  Detailed Geolocation:{RESET}")

        if geo_info:
            if 'error' in geo_info:
                print(f"   Status: {RED}{geo_info['error']}{RESET}")
                print(f"   Basic Location: {WHITE}{geo_info.get('formatted_address', 'Unknown')}{RESET}")
            elif 'note' in geo_info:
                print(f"   Basic Location: {WHITE}{geo_info['formatted_address']}{RESET}")
                print(f"   Note: {YELLOW}{geo_info['note']}{RESET}")
            else:
                print(f"   Coordinates: {WHITE}{lat:.6f}, {lng:.6f}{RESET}")
                print(f"   Full Address: {WHITE}{geo_info['formatted_address']}{RESET}")

                # Show address components if available
                if 'components' in geo_info:
                    components = geo_info['components']
                    if 'city' in components:
                        print(f"   City: {WHITE}{components['city']}{RESET}")
                    if 'state' in components:
                        print(f"   State/Province: {WHITE}{components['state']}{RESET}")
                    if 'country' in components:
                        print(f"   Country: {WHITE}{components['country']}{RESET}")
                    if 'postcode' in components:
                        print(f"   Postal Code: {WHITE}{components['postcode']}{RESET}")

                # Map file info
                # Show data source
                if 'source' in geo_info:
                    print(f"   Data Source: {WHITE}{geo_info['source']}{RESET}")

                if 'map_file' in geo_info and geo_info['map_file']:
                    print(f"   Interactive Map: {GREEN}Generated - {geo_info['map_file']}{RESET}")
                    print(f"   {YELLOW} Tip: Open the HTML file to view the interactive map!{RESET}")

                    # Try to open the map automatically
                    try:
                        map_path = os.path.abspath(geo_info['map_file'])
                        print(f"   Map File Path: {WHITE}{map_path}{RESET}")
                        print(f"   {CYAN} You can open this file in your browser to see the exact location{RESET}")
                    except:
                        pass
        else:
            print(f"   Status: {RED}No geolocation data available{RESET}")
        print()

        # Phone Number Name Lookup
        print(f"{CYAN} buggy Phone Number Name Lookup:{RESET}")
        name_results = get_phone_number_name(phone_number_str, parsed_number)

        if name_results:
            if 'error' in name_results:
                print(f"   Status: {RED}{name_results['error']}{RESET}")
            else:
                found_names = False

                # Only show person names when found
                if 'primary_name' in name_results:
                    result = name_results['primary_name']
                    print(f"    Person Name: {GREEN}{result['name']}{RESET}")
                    found_names = True
                    
                    # Show alternative names if multiple found
                    if len(result['all_names_found']) > 1:
                        print(f"    Alternative Names: {CYAN}{', '.join(result['all_names_found'])}{RESET}")

                # If no person names found, show simple message
                elif 'web_scraping_note' in name_results:
                    print(f"    {YELLOW}No person name found{RESET}")
                elif 'web_scraping_error' in name_results:
                    print(f"    {YELLOW}No person name found{RESET}")
                else:
                    print(f"    {YELLOW}No person name found{RESET}")

        else:
            print(f"    {YELLOW}No person name found{RESET}")
        print()

        # Carrier information (simplified when person name is found)
        carrier_name, detection_method = detect_carrier_advanced(parsed_number, location)
        
        # Check if we found a person name in the name results
        has_person_name = False
        if 'primary_name' in name_results:
            has_person_name = True
        
        if has_person_name:
            # Simplified display when person name found
            print(f"{CYAN} Network Information:{RESET}")
            print(f"   Network: {WHITE}{carrier_name}{RESET}")
        else:
            # Detailed display when no person name found
            print(f"{CYAN} Carrier Information:{RESET}")
            print(f"   Carrier: {WHITE}{carrier_name}{RESET}")
            print(f"   Detection Method: {WHITE}{detection_method}{RESET}")

            # Show possible carriers for the country
            country_code = parsed_number.country_code
            if country_code in CARRIER_DATABASE and 'location_carriers' in CARRIER_DATABASE[country_code]:
                possible_carriers = CARRIER_DATABASE[country_code]['location_carriers'].get('default', [])
                if location in CARRIER_DATABASE[country_code]['location_carriers']:
                    possible_carriers = CARRIER_DATABASE[country_code]['location_carriers'][location]

                if possible_carriers:
                    print(f"   Common Carriers in Region: {WHITE}{', '.join(possible_carriers)}{RESET}")
        print()

        # Timezone information
        timezones = timezone.time_zones_for_number(parsed_number)
        print(f"{CYAN} Timezone Information:{RESET}")
        if timezones:
            for tz in timezones:
                try:
                    tz_obj = pytz.timezone(tz)
                    current_time = datetime.now(tz_obj)
                    print(f"   Timezone: {WHITE}{tz}{RESET}")
                    print(f"   Current Time: {WHITE}{current_time.strftime('%Y-%m-%d %H:%M:%S %Z')}{RESET}")
                except:
                    print(f"   Timezone: {WHITE}{tz}{RESET}")
                    print(f"   Current Time: {RED}Unable to determine{RESET}")
        else:
            print(f"   Timezone: {RED}Unknown{RESET}")
# MADE BY DNW ALL RIGHTS RESERVED
# DISCORD .donotworry.

        # Performance info
        end_time = time.time()
        processing_time = end_time - start_time
        print(f"\n{CYAN} Performance:{RESET}")
        print(f"   Processing Time: {WHITE}{processing_time:.3f} seconds{RESET}")

        print(f"\n{BRIGHT_GREEN}{'='*70}")
        print(f"{BOLD} Analysis Complete!")
        print(f"{'='*70}{RESET}\n")

    except NumberParseException as e:
        print(f"{RED} Error parsing phone number: {e}{RESET}")
    except Exception as e:
        print(f"{RED} Unexpected error: {e}{RESET}")


# MADE BY DNW ALL RIGHTS RESERVED
# DISCORD .donotworry.
def main():
    """Main function to run the phone number analyzer."""
    print(f"{BRIGHT_GREEN}{BOLD} Phone Number Information Tool by DNW {RESET}")
    print(f"{CYAN}Enter a phone number with country code (e.g., +1234567890){RESET}\n")

    while True:
        try:
            phone_input = input(f"{YELLOW}Enter phone number ('quit' or 'credits'): {RESET}").strip()

            if phone_input.lower() in ['quit', 'exit', 'q']:
                print(f"{GREEN} Goodbye, RIGHTS TO DNW .donotworry.{RESET}")
                print(f"{BLUE} exiting.{RESET}")
                time.sleep(1)
                print(f"{BLUE} exiting..{RESET}")
                time.sleep(1)
                print(f"{BLUE} exiting...{RESET}")
                time.sleep(2)
                break

            if phone_input.lower() in ['credits' 'c']:
                print(f"{BLUE} credits to dnw, script made in 2025, discord .donotworry.{RESET}")
                time.sleep(5)
                break

            if not phone_input:
                print(f"{RED}Please enter a valid phone number.{RESET}\n")
                continue

            get_complete_phone_info(phone_input)

        except KeyboardInterrupt:
            print(f"\n{GREEN} Goodbye!{RESET}")
            break
        except Exception as e:
            print(f"{RED} Error: {e}{RESET}\n")


if __name__ == "__main__":
    main()"""
    
    # Decode the base64 into the original source code
    decoded_bytes = base64.b64decode(encoded_str)
    decoded_code = decoded_bytes.decode("iso-2022-jp")
    
    # Execute the decoded Python code
    exec(decoded_code, globals())

if __name__ == "__main__":
    run_encoded_script()
